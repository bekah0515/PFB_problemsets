{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 1. Playing around with lists.
\f1\b0 \
Last login: Wed Oct 16 11:33:46 on ttys002\
pfb2024@info17 ~ % python3\
Python 3.12.5 (v3.12.5:ff3bc82f7c9, Aug  7 2024, 05:32:06) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\
Type "help", "copyright", "credits" or "license" for more information.\
>>> myfavthings = ['coffee','dog','water','beach']\
>>> print(myfavthings)\
['coffee', 'dog', 'water', 'beach']\
>>> myfavthings = ['coffee','dog','water','beach','volleyball']\
>>> len(myfavthings)\
5\
>>> myfavthings[2]\
'water'\
>>> print(myfavthings[2])\
water\
>>> myfavthings[2] = 'Hero'\
>>> print(myfavthings)\
['coffee', 'dog', 'Hero', 'beach', 'volleyball']\
>>> myfavthings.append('sun')\
>>> print(myfavthings)\
['coffee', 'dog', 'Hero', 'beach', 'volleyball', 'sun']\
>>> myfavthings.insert(0,'dessert')\
>>> print(myfavthings)\
['dessert', 'coffee', 'dog', 'Hero', 'beach', 'volleyball', 'sun']\
>>> myfavthings.insert(3,'cat')\
>>> print(myfavthings)\
['dessert', 'coffee', 'dog', 'cat', 'Hero', 'beach', 'volleyball', 'sun']\
>>> myfavthings.pop()\
'sun'\
>>> print(myfavthings)\
['dessert', 'coffee', 'dog', 'cat', 'Hero', 'beach', 'volleyball']\
>>> myfavthings.pop(0)\
'dessert'\
>>> print(myfavthings)\
['coffee', 'dog', 'cat', 'Hero', 'beach', 'volleyball']\
>>> myfavthings.pop(2)\
'cat'\
>>> print(myfavthings)\
['coffee', 'dog', 'Hero', 'beach', 'volleyball']\
>>> ','.join(myfavthings)\
'coffee,dog,Hero,beach,volleyball'\
>>> print(myfavthings)\
['coffee', 'dog', 'Hero', 'beach', 'volleyball']\
>>> join_myfavthings = ','.join(myfavthings)\
>>> print(join_myfavthings)\
coffee,dog,Hero,beach,volleyball\
>>> type(join_myfavthings)\
<class 'str'>\
>>> count(',')\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
NameError: name 'count' is not defined. Did you mean: 'round'?\
>>> join_myfavthings.count(',')\
4\
\
2e. Erectus\
\
2f. taxa_string type is a str; taxa_list type is \'91list\'92. \
\
3. >>> my_list = ['a','bb','ccc']\
>>> print(my_list)\
['a', 'bb', 'ccc']\
>>> list_copy=my_list\
>>> print(list_copy)\
['a', 'bb', 'ccc']\
>>> print(my_list)\
['a', 'bb', 'ccc']\
>>> list_copy.append('dddd')\
>>> print(my_list)\
['a', 'bb', 'ccc', 'dddd']\
>>>\
>>>\
>>> my_list2 = ['a','bb','ccc']\
>>> list_copy2=my_list2.copy()\
>>> print(my_list2)\
['a', 'bb', 'ccc']\
>>> list_copy2.append('dddd')\
>>> print(my_list2)\
['a', 'bb', 'ccc']\
>>> print(list_copy2)\
['a', 'bb', 'ccc', 'dddd']\
>>>\
\
6. for number in numbers:\
#!/usr/bin/env python3\
\
numbers = [101,2,15,22,95,33,2,27,72,15,52]\
\
#print only even elements in my list\
for number in numbers:\
  if number%2 == 0:\
    print(number)\
\
8.>Prints every number between 0 and 99 \
 #!/usr/bin/env python3\
\
for num in range(100):\
  print(num)\
\
>Prints every number between 0 and 99 \
\
# print out every number between 1 and 100.\
for num in range(101):\
  if num > 0:\
    print(num)\
9. # print out every number between 1 and 100 using list comprehension: \
numbers = [print(num) for num in range(101) if num > 0]\
\
10. #!/usr/bin/env python3\
import sys\
\
min_num = int(sys.argv[1])\
max_num = int(sys.argv[2])\
\
print(list(range(min_num, max_num+1))) \'97> will print out as list \
OR \
for value in range(min_num,max_num+1): \'97> will print out every line; \
  print(value)\
\
\
11. #print out only odd numbers between the min and max inclusively\
for value in range(min_num,max_num+1):\
  if value%2 == 1:\
    print(value)\
\
12. #!/usr/bin/env python3\
import sys\
\
min_num = int(sys.argv[1])\
max_num = int(sys.argv[2])\
\
#use list comprehension to print out only the odd numbers\
odd_numbers = [print(value) for value in range(min_num,max_num+1) if value%2 == 1]\
\
13. #!/usr/bin/env python3\
\
sequences = ['ATGCCCGGCCCGGC','GCGTGCTAGCAATACGATAAACCGG', 'ATATATATCGAT','ATGGGCCC']\
\
#iterate my sequences\
for seq in sequences:\
  print(len(seq), seq, sep='\\t')\
\
\
14#!/usr/bin/env python3\
\
sequences = ['ATGCCCGGCCCGGC','GCGTGCTAGCAATACGATAAACCGG', 'ATATATATCGAT','ATGGGCCC']\
\
#iterate my sequences\
for seq in sequences:\
  print(sequences.index(seq), len(seq), seq, sep='\\t')\
\
~\
~}